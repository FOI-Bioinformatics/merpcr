name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  FORCE_COLOR: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-xdist psutil

    - name: Create test data if missing
      run: |
        python -c "
        import os
        from pathlib import Path
        
        # Ensure test data directory exists
        test_data_dir = Path('tests/data')
        test_data_dir.mkdir(exist_ok=True)
        
        # Create minimal test files if they don't exist
        sts_file = test_data_dir / 'test.sts'
        if not sts_file.exists():
            with open(sts_file, 'w') as f:
                f.write('AFM248yg9\\tGCTAAAAATACACGGATGG\\tTGCAAGACTGCGTCTC\\t193\\t(D17S932) Chr.17\\n')
                f.write('L78833\\tGAGGCAAAGCTCATGGAAGA\\tCAGGAAGGCCAGCCATTT\\t195\\tUniSTS:5690\\n')
        
        fa_file = test_data_dir / 'test.fa'
        if not fa_file.exists():
            with open(fa_file, 'w') as f:
                f.write('>test_sequence\\n')
                f.write('GCTAAAAATACACGGATGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\\n')
                f.write('NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\\n')
                f.write('NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTGCAAGACTGCGTCTC\\n')
        "

    - name: Run unit tests
      run: |
        pytest tests/ -m "unit" -v --tb=short --durations=10

    - name: Run integration tests
      run: |
        pytest tests/ -m "integration" -v --tb=short --durations=10

    - name: Run CLI tests
      run: |
        pytest tests/ -m "cli" -v --tb=short --durations=10

    - name: Run other tests
      run: |
        pytest tests/ -m "not (unit or integration or cli or performance)" -v --tb=short --durations=10

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov psutil

    - name: Create test data if missing
      run: |
        python -c "
        import os
        from pathlib import Path
        
        test_data_dir = Path('tests/data')
        test_data_dir.mkdir(exist_ok=True)
        
        sts_file = test_data_dir / 'test.sts'
        if not sts_file.exists():
            with open(sts_file, 'w') as f:
                f.write('AFM248yg9\\tGCTAAAAATACACGGATGG\\tTGCAAGACTGCGTCTC\\t193\\t(D17S932) Chr.17\\n')
                f.write('L78833\\tGAGGCAAAGCTCATGGAAGA\\tCAGGAAGGCCAGCCATTT\\t195\\tUniSTS:5690\\n')
        
        fa_file = test_data_dir / 'test.fa'
        if not fa_file.exists():
            with open(fa_file, 'w') as f:
                f.write('>test_sequence\\n')
                f.write('GCTAAAAATACACGGATGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\\n')
                f.write('NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\\n')
                f.write('NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTGCAAGACTGCGTCTC\\n')
        "

    - name: Run tests with coverage
      run: |
        pytest --cov=src/merpcr --cov-report=xml --cov-report=html -m "not performance" -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest psutil

    - name: Create test data
      run: |
        python -c "
        import os
        from pathlib import Path
        
        test_data_dir = Path('tests/data')
        test_data_dir.mkdir(exist_ok=True)
        
        sts_file = test_data_dir / 'test.sts'
        if not sts_file.exists():
            with open(sts_file, 'w') as f:
                f.write('AFM248yg9\\tGCTAAAAATACACGGATGG\\tTGCAAGACTGCGTCTC\\t193\\t(D17S932) Chr.17\\n')
                f.write('L78833\\tGAGGCAAAGCTCATGGAAGA\\tCAGGAAGGCCAGCCATTT\\t195\\tUniSTS:5690\\n')
        
        fa_file = test_data_dir / 'test.fa'
        if not fa_file.exists():
            with open(fa_file, 'w') as f:
                f.write('>test_sequence\\n')
                f.write('GCTAAAAATACACGGATGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\\n')
                f.write('NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\\n')
                f.write('NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTGCAAGACTGCGTCTC\\n')
        "

    - name: Run performance tests
      env:
        SKIP_PERFORMANCE_TESTS: ""
      run: |
        pytest tests/ -m "performance" -v --tb=short --durations=10

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance_*.txt
          benchmark_*.json
      if: always()